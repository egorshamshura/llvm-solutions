func max(x y) -> int {
  if (x < y) {
    x = y;
  }
  return x;
}

func abs(x) -> int {
  var zero = 0;
  if (x < zero) {
    x = -1 * x;
  }
  return x;
}

func app() -> int {
  var pallete = alloc(36);
  var colors = alloc(131072);
  var zero = 0;
  pallete[0] = 4278650631;
  pallete[1] = 4280223495;
  pallete[2] = 4281274119;
  pallete[3] = 4282846983;
  pallete[4] = 4283897607;
  pallete[5] = 4284948231;
  pallete[6] = 4285996807;
  pallete[7] = 4287571719;
  pallete[8] = 4288622343;
  pallete[9] = 4289675015;
  pallete[10] = 4290725639;
  pallete[11] = 4291249927;
  pallete[12] = 4292824839;
  pallete[13] = 4292826887;
  pallete[14] = 4292826887;
  pallete[15] = 4292304647;
  pallete[16] = 4292304647;
  pallete[17] = 4292306703;
  pallete[18] = 4291784463;
  pallete[19] = 4291786511;
  pallete[20] = 4291788559;
  pallete[21] = 4291790615;
  pallete[22] = 4291266327;
  pallete[23] = 4291268375;
  pallete[24] = 4291270431;
  pallete[25] = 4290748191;
  pallete[26] = 4290748191;
  pallete[27] = 4290750247;
  pallete[28] = 4290750247;
  pallete[29] = 4290752303;
  pallete[30] = 4290228015;
  pallete[31] = 4290230063;
  pallete[32] = 4290230071;
  pallete[33] = 4291809135;
  pallete[34] = 4292861855;
  pallete[35] = 4293914567;
  var palleteSize = 36;
  var x = 0;
  var endX = 512;
  while (x < endX) {
    var t = 255 * 512 + x;
    colors[t] = 35;
    var y = 0;
    var endY = 255;
    while (y < endY) {
      var v = y * 512 + x;
      colors[v] = 0;
      y = y + 1;
    }
    x = x + 1;
  }
  var step = 0;
  var endStep = 1;
  while (step < endStep) {
    var x = 0;
    var endX = 512;
    while (x < endX) {
      var y = 1;
      var endY = 256;
      while (y < endY) {
        var rand = rand();
        var from = y * 512 + x;
        var to = from - 512 - (rand & 3) + 1;
        var color_from = colors[from];
        if (color_from == zero) {
          colors[to] = 0;
        }
        var z = colors[to];
        if (color_from != zero) {
          var xxx = ((rand / 2) & rand & 1);
          colors[to] = color_from - xxx;
        }
        var l = pallete[color_from];
        dump(color_from);
        put_pixel(x y l);
        y = y + 1;
      }
      x = x + 1;
    }
    flush();
  }
  return zero;
}
